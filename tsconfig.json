{
  // 指定哪些ts文件需要被编译。
  // 路径：**表示任意目录，*表示任意文件。
  // "include": [], [src/**/*]：src下所有文件

  // 指定当解析include选项时，不需要被编译的文件目录。默认值[node_modules, "bowser_components", "jspm_packages"]加上 outDir选项指定的值
  // "exclude": [],

  // 定义被继承的配置文件
  // "extends": "",

  // 指定编译的文件列表（只能是文件）
  // "files": [],

  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    "target": "es2016", // 指定编译后的版本

    "module": "es6", // 指定要使用的模块化版本规范   none', 'commonjs', 'amd', 'system', 'umd', 'es6', 'es2015', 'es2020', 'es2022', 'esnext', 'node12', 'nodenext'

    // "baseUrl": "", // 解析非相对模块名称的基本目录

    // "paths": {}, // 设置模块名到基于 baseUrl 的路径映射

    // "lib": ["es6", "dom"], // 指定需要用到的库

    // "outDir": "", // 指定编译后的文件所在目录

    // "outFile": "", // 将全局作用域的文件合并为一个文件。只能是 module.amd 或 system 适用

    "declaration": true, // 指定在编译时是否生成相应的 d.ts声明文件。 不能和 allowJs同时为 true

    // "sourceMap": true, // 是否生成.map文件

    // "rootDir": "", // 指定编译文件的根目录，编译器会在根目录查找入口文件

    "esModuleInterop": true, // 通过导入内容创建命名空间，实现 CommonJS和ES模块之间的互操作性

    "forceConsistentCasingInFileNames": true, // 禁止对同一个文件的不一致的引用

    "allowJs": false, // 是否对 js 文件进行编译

    "checkJs": false, // 是否检查 JS 代码符合规范

    "removeComments": false, // 是否移除注释

    // "noEmit": false, // 不生成编译后的文件

    // "noEmitOnError": false, // 当有错误时，不编译成文件

    "strict": true, // 所有语法检查的总开关，默认开启
    // "alwaysStrict": false, // 编译后的文件是否是严格模式
    // "noImplicitAny": false, // 不允许隐式推导为any类型
    // "noImplicitThis": false, // 不允许不明确的类型 this
    // "strictNullChecks": false, // 严格检查空值， null 和 undefined

    "moduleResolution": "node", // 模块解析策略。 有 node 和 classic 两种类型

    "allowSyntheticDefaultImports": true, // 允许从没有默认导出的模块中默认导入

    "experimentalDecorators": true, // 启用实验性的 ES 装饰器

    "emitDecoratorMetadata": true, // 给源码里的装饰器声明加上设计类型元数据

    // "declarationDir": "", // 生成声明文件的输出路径。

    // "skipDefaultLibCheck": false, // 忽略库的默认声明文件的类型检查

    // "typeRoots": [], // 指定声明文件或文件夹的路径列表

    // "types": [], // 指定需要包含的模块，只有这里列出的模块的声明文件才会被加载

    // "jsx": "preserve", // 指定 jsx 代码用于的开发环境

    "noUnusedLocals": false, // 若有未使用的局部变量则报错

    "noUnusedParameters": false, // 若有未使用的参数则报错

    // "noImplicitReturns": false, // 检查函数是否有返回值。

    // "noFallthroughCasesInSwitch": false, // 检查switch中是否有case没有使用break跳出switch,默认为false

    "skipLibCheck": false // 忽略所有的声明文件的类型检查
  }
}
